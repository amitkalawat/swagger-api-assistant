
    Documentation for bookstore
    
    Description:
    The Bookstore API provides endpoints for managing books and authors in a bookstore. The API allows you to list all available books, create a new book, retrieve a specific book, update an existing book, and delete a book. Similarly, you can perform CRUD operations on authors. The Book schema includes properties like id, title, author (an Author object), description, and published date. The BookInput schema is used for creating or updating a book, and it includes properties like title, authorId, description, and published date. The Author schema includes properties like id, name, and biography. The AuthorInput schema is used for creating or updating an author, and it includes properties like name and biography.
    ['- Number of routes/endpoints: 10', '- Number of request data models: 2 (BookInput and AuthorInput)', '- Number of response data models: 2 (Book and Author)']
    
    FAQ:
    
    What is the purpose of the Bookstore API?

The Bookstore API provides a set of endpoints for managing books and authors in a bookstore. It allows you to perform CRUD (Create, Read, Update, Delete) operations on books and authors.

How can I list all available books in the store?

You can send a GET request to the `/books` endpoint to retrieve a list of all available books. The API will respond with an array of Book objects containing details like id, title, author, description, and published date.

How can I create a new book in the store?

To create a new book, you need to send a POST request to the `/books` endpoint with a request body containing a BookInput object. The BookInput object should include the title, authorId, description (optional), and published date (optional) of the book.

What does the BookInput schema contain?

The BookInput schema is an object with the following properties: title (string, required), authorId (integer, required), description (string, optional), published (string in date format, optional).

How can I retrieve details of a specific book?

To retrieve details of a specific book, you need to send a GET request to the `/books/{bookId}` endpoint, where `{bookId}` is the ID of the book you want to retrieve. The API will respond with a Book object containing the details of the requested book.

What happens if I try to retrieve a book that doesn't exist?

If you try to retrieve a book that doesn't exist by sending a GET request to `/books/{bookId}` with a non-existent `bookId`, the API will respond with an appropriate error message, such as a 404 Not Found error.

How can I update an existing book?

To update an existing book, you need to send a PUT request to the `/books/{bookId}` endpoint, where `{bookId}` is the ID of the book you want to update. The request body should contain a BookInput object with the updated book details.

What happens if I try to update a book with an invalid ID?

If you try to update a book with an invalid ID by sending a PUT request to `/books/{bookId}` with a non-existent `bookId`, the API will respond with an appropriate error message, such as a 404 Not Found error.

How can I delete a book from the store?

To delete a book, you need to send a DELETE request to the `/books/{bookId}` endpoint, where `{bookId}` is the ID of the book you want to delete. If the operation is successful, the API will respond with a 204 No Content status code.

What happens if I try to delete a book that doesn't exist?

If you try to delete a book that doesn't exist by sending a DELETE request to `/books/{bookId}` with a non-existent `bookId`, the API will respond with an appropriate error message, such as a 404 Not Found error.

How can I list all authors in the store?

You can send a GET request to the `/authors` endpoint to retrieve a list of all authors. The API will respond with an array of Author objects containing details like id, name, and biography.

What does the Author schema contain?

The Author schema is an object with the following properties: id (integer, required), name (string, required), biography (string, optional).

How can I create a new author?

To create a new author, you need to send a POST request to the `/authors` endpoint with a request body containing an AuthorInput object. The AuthorInput object should include the name (required) and biography (optional) of the author.

What does the AuthorInput schema contain?

The AuthorInput schema is an object with the following properties: name (string, required), biography (string, optional).

How can I retrieve details of a specific author?

To retrieve details of a specific author, you need to send a GET request to the `/authors/{authorId}` endpoint, where `{authorId}` is the ID of the author you want to retrieve. The API will respond with an Author object containing the details of the requested author.

How can I update an existing author?

To update an existing author, you need to send a PUT request to the `/authors/{authorId}` endpoint, where `{authorId}` is the ID of the author you want to update. The request body should contain an AuthorInput object with the updated author details.

How can I delete an author from the store?

To delete an author, you need to send a DELETE request to the `/authors/{authorId}` endpoint, where `{authorId}` is the ID of the author you want to delete. If the operation is successful, the API will respond with a 204 No Content status code.

What happens if I try to perform an operation on an author or book with an invalid ID?

If you try to perform an operation (GET, PUT, DELETE) on an author or book with an invalid ID, the API will respond with an appropriate error message, such as a 404 Not Found error.

Are there any limits or restrictions on the data I can send in the request body?

The YAML file doesn't specify any explicit limits or restrictions on the data you can send in the request body. However, it's generally a good practice to validate and sanitize user input to prevent potential security vulnerabilities or data inconsistencies.

