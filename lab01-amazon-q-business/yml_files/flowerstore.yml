openapi: 3.0.0
info:
  version: 1.0.0
  title: Flowershop API
  description: A sample API for managing a flowershop's operations
  termsOfService: https://example.com/terms
  contact:
    name: API Support
    email: support@example.com
    url: https://example.com/support
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://api.example.com/v1
paths:
  /flowers:
    get:
      description: Returns all flowers available in the shop
      operationId: findFlowers
      parameters:
        - name: type
          in: query
          description: Filter by flower type
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: Maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flower'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Adds a new flower to the shop
      operationId: addFlower
      requestBody:
        description: Flower object to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewFlower'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flower'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /flowers/{id}:
    get:
      description: Returns a flower by its ID
      operationId: findFlowerById
      parameters:
        - name: id
          in: path
          description: ID of the flower to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flower'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Deletes a flower by its ID
      operationId: deleteFlower
      parameters:
        - name: id
          in: path
          description: ID of the flower to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful response
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Flower:
      allOf:
        - $ref: '#/components/schemas/NewFlower'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
    NewFlower:
      type: object
      required:
        - name
        - type
        - price
      properties:
        name:
          type: string
        type:
          type: string
        price:
          type: number
          format: float
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string